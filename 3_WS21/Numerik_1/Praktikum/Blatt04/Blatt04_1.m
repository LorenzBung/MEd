##Abgabe von Charlotte Rothhaar und Lorenz Bung## Projekt 1function Blatt04_1()    test_hilbert();endfunction
function test_hilbert()    for n = [3, 10]        printf("\nHilbert matrix test for n = %d:\n", n);        A = zeros(n,n);        b = transpose(1:n);        for i = 1:n            for j = 1:n                A(i,j) = 1 / (i + j - 1);            endfor        endfor        [Q, R] = house(A);        display(A);        display(Q);        display(R);        QR = Q * R;        display(QR);    endfor
endfunction
function [Q,R] = house(A)    [m, n] = size(A);    #Dimensionspruefung der Matrix A    if n > m        error("Matrix A muss mehr Zeilen als Spalten besitzen");    endif    #Ausgabe Initialisieren    Q = eye(size(A));    V = zeros(size(A));    R = zeros(n);    for k = 1:n        #Spiegelungsvektor v konstruieren        x = A(k:m,k);        tmp = sign(x(1)) * norm(x);        v = x;        v(1) = v(1) + tmp;        v = v / norm(v);        #Spiegelung durchfuehren        A(k:end,k:end) = A(k:end,k:end) - 2 * v * (v' * A(k:end,k:end));        #Spiegelvektoren merken        V(k:end,k) = v;    endfor    #Die Matrix Q berechnen.    for k = n:-1:1        v = V(k:end,k);        Q(k:end,:) = Q(k:end,:) - 2*v*(v'*Q(k:end,:));    endfor    #R ist ja gerade der rechte obere Teil von A    R = triu(A);endfunction