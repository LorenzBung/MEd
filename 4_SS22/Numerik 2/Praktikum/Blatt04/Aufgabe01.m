function res = Aufgabe01()    % Testintervall    a = 0;    b = 1;        % Teste die verschiedenen Quadraturformeln    for i = 1:6        % Funktion i-ten Grades        f = @(x) x.^i;        fprintf("Funktion %d-ten Grades:\n", i);                I_trapez = quadratur(f, a, b, 1);        fprintf("Trapez: %f\n", I_trapez);        I_simpson = quadratur(f, a, b, 2);        fprintf("Simpson: %f\n", I_simpson);        I_gauss = quadratur(f, a, b, 3);        fprintf("Gauss: %f\n", I_gauss);        I_real = integral(f, a, b);        fprintf("Echtes Integral: %f\n\n", I_real);    end        % Wie man an der Ausgabe des Programms sieht, liefert die Trapez-Regel nur    % für Polynome 1. Grades das richtige Ergebnis, die Simpson-Regel auch für    % Polynome 2. Grades und die Gauß-Quadratur sogar für Polynome bis zum    % Grad 5. Dies macht Sinn, denn der Exaktheitsgrad der 3-Punkt-Gauss-Quadratur    % beträgt 2 * n + 1 = 2 * 2 + 1 = 5. Ebenso beträgt der Exaktheitsgrad für    % die Trapez-Regel n = 1 und für die Simpson-Regel n = 2.endfunction y = quadratur(f, a, b, mode)    if mode == 1        % Verwende Trapez-Regel        y = (b-a)/2 * (f(a) + f(b));    elseif mode == 2        % Verwende Simpson-Regel        y = (b-a)/6 * (f(a) + 4 * f((a+b)/2) + f(b));    elseif mode == 3        % Verwende 3-Punkt Gauss-Legendre-Quadratur        j = ((a+b)/2) - sqrt(3/5) * ((b-a)/2);        k = (a+b)/2;        l = ((a+b)/2) + sqrt(3/5) * ((b-a)/2);        y = ((b-a)/18) * (5*f(j) + 8*f(k) + 5*f(l));    else        error("Mögliche Werte für mode: 1 = trapez, 2 = simpson, 3 = gauss");    endend